@inherits System.Web.Mvc.WebViewPage<Solita.LanguageEditor.UI.Models.LanguageEditorViewModel>

@using System.Globalization
@using System.Web.Mvc.Html
@using EPiServer.Framework.Web.Resources
@using EPiServer.Shell.Navigation
@using EPiServer.Shell.Web.Mvc.Html
@using Solita.LanguageEditor.UI.Common


<!DOCTYPE html>

<html>
    <head>
        <title>@Html.Translate("/languageeditor/title")</title>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
       
        <!-- Shell -->
        @Html.Raw(ClientResources.RenderResources("ShellCore"))
        @Html.Raw(ClientResources.RenderResources("ShellWidgets"))
        <!-- LightTheme -->
        @Html.Raw(ClientResources.RenderResources("ShellCoreLightTheme"))
        <!-- Navigation -->
        @Html.Raw(ClientResources.RenderResources("Navigation"))
        <!-- Dojo Dashboard -->
        @Html.Raw(ClientResources.RenderResources("DojoDashboardCompatibility"))
        
        <style type="text/css">

            .language-editor td {
                padding: 0 5px;
            }
            .language-editor {
                margin: 10px;
            }
            .language-editor .heading-row{
                padding-top: 1em;
            }
            .language-editor th {
                text-align: center;
            }
            .language-editor table {
                margin-bottom: 2em;
            }
            .language-editor .value-modified {
                background-color: lightgoldenrodyellow;
            }
            .language-editor .value-new {
                background-color: lightgreen;
            }
            .translations-row input[type=text], .version-selector {
                width: 200px;
            }
            .hidden {
                display: none;
            }
            .image-button {
                padding: 1px;
            }

        </style>
    </head>

    <body>
        <div id="epi-globalDocument">
            @Html.Raw(Html.GlobalMenu())

            <div class="language-editor">

                @using (Html.BeginForm(new { Action = "Save" }))
                {

                    <table>
                        <tr class="languages-row">
                            <th></th>
                            <th></th>
                            @foreach (var lang in Model.Languages)
                            {
                                <th data-lang="@lang">
                                    @CultureInfo.GetCultureInfo(lang).DisplayName
                                    @if (Model.DevelopmentMode)
                                    {
                                        <button type="button" class="defaults-column image-button" title="@Html.Translate("/languageeditor/setcolumndefaults")">
                                            <img src="@ModuleUtil.PathTo("/static/img/arrow_down.png")" alt="@Html.Translate("/languageeditor/setcolumndefaults")" />
                                        </button>
                                    }
                                </th>
                            }
                        </tr>
        
                        @for (var iCat = 0; iCat < Model.Categories.Count(); iCat++)
                        {
                            <tr class="category-row"><td class="heading-row"><strong class="category">@Model.Categories[iCat].Name</strong></td></tr>

                            for (var iTrans = 0; iTrans < Model.Categories[iCat].Translations.Count(); iTrans++)
                            {
                                <tr class="translations-row"
                                    data-default="@Model.Categories[iCat].Translations[iTrans].DefaultValue"
                                    data-key="@Model.Categories[iCat].Translations[iTrans].Key" 
                                    data-description="@Model.Categories[iCat].Translations[iTrans].Description">
                                    <td>
                                        @Model.Categories[iCat].Translations[iTrans].Description
                                        @Html.HiddenFor(m => m.Categories[iCat].Translations[iTrans].Key)
                                        @Html.HiddenFor(m => m.Categories[iCat].Translations[iTrans].Description)
                                    </td>
                
                                    <td>
                                        @if (Model.DevelopmentMode)
                                        {
                                            <button type="button" class="defaults-row image-button" title="@Html.Translate("/languageeditor/setrowdefaults")" >
                                                <img src="@ModuleUtil.PathTo("/static/img/arrow_right.png")" alt="@Html.Translate("/languageeditor/setrowdefaults")" />
                                            </button>
                                        }
                                    </td>
                
                                    @foreach (var lang in Model.Languages)
                                    {
                                        <td data-lang="@lang">
                                            @Html.TextBoxFor(m => m.Categories[iCat].Translations[iTrans].Translations[lang], new { @class = "translation-input", data_original = Model.Categories[iCat].Translations[iTrans].Translations[lang] })
                                            <button type="button" class="undo-cell image-button" title="@Html.Translate("/languageeditor/undo")">
                                                <img src="@ModuleUtil.PathTo("/static/img/arrow_undo.png")" alt="@Html.Translate("/languageeditor/undo")" />
                                            </button>
                                            @if (Model.DevelopmentMode)
                                            {
                                                <button type="button" class="defaults-cell image-button" title="@Html.Translate("/languageeditor/setdefault")"  >
                                                    <img src="@ModuleUtil.PathTo("/static/img/arrow_in.png")" alt="@Html.Translate("/languageeditor/setdefault")" />
                                                </button>
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        }

                        @if (Model.DevelopmentMode)
                        {
                            <tr><td class="heading-row"><strong>@Html.Translate("/languageeditor/reverttoolderversion")</strong></td></tr>
                            <tr class="version-revert-row">
                                <td></td>
                                <td></td>
                                @foreach (var language in Model.Languages)
                                {
                                    <td class="version-revert-cell" data-lang="@language">
                                        <select class="version-selector">
                                            @foreach (var version in Model.Versions.Reverse())
                                            {
                                                <option value="@version.Id">@version.Name - @version.Created.ToShortDateString() @version.Created.ToShortTimeString() - @version.CreatedBy</option>
                                            }
                                        </select>
                                        <button class="version-revert image-button"  title="@Html.Translate("/languageeditor/reverttoolderversion")">
                                            <img src="@ModuleUtil.PathTo("/static/img/arrow_up.png")" alt="@Html.Translate("/languageeditor/reverttoolderversion")" />
                                        </button>
                                    </td>
                                }
                            </tr>
                        }
                    </table>

                    if (Model.DevelopmentMode)
                    {
                        <table>
                            <tr><td class="heading-row"><strong>@Html.Translate("/languageeditor/importexport")</strong></td></tr>
                            <tr class="version-revert-row">
                                <td>
                                    <input type="file" class="csv-file-upload" />
                                    <button type="button" class="csv-import image-button" title="@Html.Translate("/languageeditor/import")">
                                        <img  src="@ModuleUtil.PathTo("/static/img/arrow_up.png")" alt="@Html.Translate("/languageeditor/import")" />
                                    </button>
                                </td>
                                <td>
                                    <button type="button" class="csv-export image-button" title="@Html.Translate("/languageeditor/export")">
                                        <img  src="@ModuleUtil.PathTo("/static/img/page_excel.png")" alt="@Html.Translate("/languageeditor/export")" />
                                    </button>
                                    <a class="hidden csv-export-datalink" download="translations.txt"></a>
                                </td>
                            </tr>
                        </table>
                    }




                    <button type="button" class="undo-all">@Html.Translate("/languageeditor/undoall")</button>
                    <button type="submit">@Html.Translate("/languageeditor/save")</button>
                }

            </div>
        </div>

        <script type="text/javascript">

            $(document).ready(function () {

                $(".csv-export").click(function () {
                    var rows = new Array();

                    var firstRowColumns = new Array();
                    firstRowColumns.push("Key");
                    firstRowColumns.push("Description");
                    $(".languages-row").find('[data-lang]').each(function () {
                        var lang = $(this).data("lang");
                        firstRowColumns.push(lang);
                    });
                    rows.push(firstRowColumns.join("\t"));

                    $(".category-row").each(function () {
                        var category = $(this).find(".category").text();
                        rows.push(category);
                        
                        $(this).nextUntil(":not(.translations-row)").each(function () {
                            var columns = new Array();
                            columns.push($(this).data("key"));
                            columns.push($(this).data("description"));

                            $(this).find('.translation-input').each(function () {
                                columns.push($(this).val());
                            });

                            rows.push(columns.join("\t"));
                        });
                    });

                   

                    var output = btoa(rows.join("\r\n"));
                    $(".csv-export-datalink").attr("href", 'data:text/plain;charset=UTF-8;base64,' + output);
                    $(".csv-export-datalink")[0].click();
                });
                
                $(".csv-import").click(function() {
                    var fileupload = $(".csv-file-upload")[0];

                    if (fileupload.files.length < 1) {
                        return;
                    }
                    
                    var file = fileupload.files[0];

                    if (!file.type.match('text/plain')) {
                        alert("File needs to be a plain text file.");
                        return;
                    }

                    var reader = new FileReader();
                    reader.onload = (function() {
                        return function(e) {
                            var rows = e.target.result.split(/[\r\n]/g);
                            var languages = rows[0].split("\t").slice(2);
                            var translationRows = rows.slice(1);

                            translationRows.forEach(function(row) {
                                var columns = row.split("\t");
                                var key = columns[0];
                                var translations = columns.slice(2);

                                for (var k = 0; k < translations.length; k++) {
                                    setInput(key, languages[k], translations[k]);
                                }
                            });
                        };
                    })(file);

                    reader.readAsText(file);
                });
                
                $(".version-revert").click(function () {
                    var version = $(this).siblings(".version-selector:first").val();
                    var lang = $(this).closest(".version-revert-cell").data("lang");

                    var url = '@Url.Action("GetJsonLocalizations")?lang='+ lang + '&version=' + version;
                    $.ajax({ url: url, success: getJsonLocalizationsCallback, type: 'POST', dataType: 'json' });
                });
                
                $(".undo-cell").click(function () {
                    var translationInput = $(this).siblings(".translation-input:first");
                    setOriginalValue(translationInput);
                });
                
                $(".undo-all").click(function () {
                    $(".translation-input").each(function() {
                        setOriginalValue($(this));
                    });
                });
                
                $(".defaults-cell").click(function () {
                    var translationInput = $(this).siblings(".translation-input:first");
                    setDefaultValue(translationInput);
                });

                $(".defaults-column").click(function () {
                    var lang = $(this).parent().data("lang");
                    getInputsByLanguage(lang).each(function() {
                        setDefaultValue($(this));
                    });
                });

                $(".defaults-row").click(function () {
                    $(this).closest(".translations-row").find(".translation-input").each(function () {
                        setDefaultValue($(this));
                    });
                });

                $(".translation-input").change(function() {
                    setModifiedStatus($(this));
                });
            });

            function getInputsByLanguage(lang) {
                return $("td[data-lang='" + lang + "']").find(".translation-input");
            }

            function setOriginalValue(translationInput) {
                $(translationInput).val(getOriginalValue(translationInput)).change();
            }
            
            function getOriginalValue(translationInput) {
                return $(translationInput).data("original");
            }
            
            function setDefaultValue(translationInput) {
                $(translationInput).val(getDefaultValue(translationInput)).change();
            }
            
            function getDefaultValue(translationInput) {
                return $(translationInput).closest(".translations-row").data("default");
            }

            function setModifiedStatus(translationInput) {
                translationInput.removeClass("value-modified");
                translationInput.removeClass("value-new");
                var originalValue = getOriginalValue(translationInput);
                if (translationInput.val() !== originalValue) {
                    if (originalValue == "") {
                        translationInput.addClass("value-new");
                    } else {
                        translationInput.addClass("value-modified");
                    }
                }
            }

            function getJsonLocalizationsCallback(json) {
                var language = json.language;
                var translations = json.translations;
                for (var i = 0; i < translations.length; i++) {
                    setInput(translations[i].key, language, translations[i].translation);
                }
            }

            function setInput(key, language, translation) {
                $(".translations-row[data-key='" + key + "']")
                    .find("td[data-lang='" + language + "']")
                    .find(".translation-input")
                    .val(translation)
                    .change();
            }

        </script>

    </body>
</html>